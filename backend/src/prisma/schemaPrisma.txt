datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String        @id @default(uuid())
  name        String?
  avatar      String?
  status      UserStatus
  last_login  DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  owner       Channel[]     @relation("owner")
  playerOne   Game?         @relation("playerOne")
  playerTwo   Game?         @relation("playerTwo")
  message     Message[]
  friends     Friends[]
  channelUser ChannelUser[]
  auth        Auth?
  userId      String?
}

model Auth {
  userId   String @id 
  user     User   @relation(fields: [userId], references: [id])
  email    String @unique
  password String
}

model Friends {
  id        String @id @default(uuid())
  friends   User   @relation(fields: [friendsId], references: [id])
  friendsId String
}

model Game {
  id        String     @id @default(uuid())
  mode      GameMode
  startedAt DateTime   @default(now())
  endedAt   DateTime?   @default(now())
  status    GameStatus @default(STARTING)

  playerOne      User   @relation("playerOne", fields: [playerOneId], references: [id])
  playerOneId    String @unique
  playerOneScore Int
  playerTwo      User?   @relation("playerTwo", fields: [playerTwoId], references: [id])
  playerTwoId    String @unique
  playerTwoScore Int

  socketId String @unique
}

model Channel {
  id          String        @id @default(uuid())
  owner       User          @relation("owner", fields: [ownerId], references: [id])
  createdAt   DateTime      @default(now())
  channelType ChannelType
  password    String?
  ownerId     String
  messages    Message[]
  users       ChannelUser[]
}

model ChannelUser {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  channel   Channel @relation(fields: [channelId], references: [id])
  channelId String

  role Role

  isBlocked Boolean
  isBan     Boolean
  banUntil  DateTime
  isMute    Boolean
}

model Message {
  id        String  @id @default(uuid())
  content   String
  sender    User    @relation(fields: [senderId], references: [id])
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId String
  senderId  String
}

enum Role {
  USER
  ADMIN
  OWNER
}

enum GameMode {
  PONG_2D
  PONG_3D
}

enum ChannelType {
  PRIVATE
  PUBLIC
  PROTECTED
}

enum GameStatus {
  STARTING
  RUNNING
  FINISHED
}

enum UserStatus {
  ONLINE
  OFFLINE
  IN_GAME
}
