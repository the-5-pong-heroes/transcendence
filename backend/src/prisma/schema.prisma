datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "linux-musl"]
}

model User {
  id            String        @id @unique @default(uuid()) @db.Uuid
  name          String        @unique
  avatar        String?
  status        UserStatus
  lastLogin     DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  gamesOne      Game[]        @relation("playerOne")
  gamesTwo      Game[]        @relation("playerTwo")
  messages      Message[]
  friendships   Friendship[]  @relation("friendships")
  addedBy       Friendship[]  @relation("addedBy")
  channelUsers  ChannelUser[]
  channelBans   ChannelBan[]
  auth          Auth?
}

model Auth {
  user     User   @relation(fields: [userId], references: [id])
  userId   String @id @unique @db.Uuid
  email    String @unique
  password String
}

model Friendship {
  user      User     @relation("friendships", fields: [userId], references: [id])
  userId    String   @db.Uuid
  addedBy   User     @relation("addedBy", fields: [addedById], references: [id])
  addedById String   @db.Uuid
  createdAt DateTime @default(now())

  @@id(fields: [userId, addedById])
}

model Game {
  id        String     @id @default(uuid()) @db.Uuid
  startedAt DateTime   @default(now())
  endedAt   DateTime?
  status    GameStatus @default(WAITING)

  playerOne      User   @relation("playerOne", fields: [playerOneId], references: [id])
  playerOneId    String @db.Uuid
  playerOneScore Int    @default(0)
  playerTwo      User?  @relation("playerTwo", fields: [playerTwoId], references: [id])
  playerTwoId    String @db.Uuid
  playerTwoScore Int    @default(0)

  socketId String
}

model Channel {
  id          String        @id @default(uuid()) @db.Uuid
  name        String
  createdAt   DateTime      @default(now())
  lastMessage DateTime      @default(now())
  type        ChannelType
  password    String?
  messages    Message[]
  users       ChannelUser[]
  banned      ChannelBan[]
}

model ChannelUser {
  id     String @id @default(uuid()) @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  channel   Channel @relation(fields: [channelId], references: [id])
  channelId String  @db.Uuid

  role Role     @default(USER)

  isAuthorized  Boolean   @default(false)
  isMuted       Boolean   @default(false)
  mutedUntil    DateTime?
}

model ChannelBan {
  id     String @id @default(uuid()) @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  channel   Channel @relation(fields: [channelId], references: [id])
  channelId String  @db.Uuid
  
  bannedUntil DateTime
}

model Message {
  id        String   @id @default(uuid()) @db.Uuid
  content   String
  sender    User?    @relation(fields: [senderId], references: [id])
  senderId  String?  @db.Uuid
  channel   Channel  @relation(fields: [channelId], references: [id])
  channelId String   @db.Uuid
  createdAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
  OWNER
}

enum ChannelType {
  PRIVATE
  PUBLIC
  PROTECTED
}

enum GameStatus {
  WAITING
  RUNNING
  FINISHED
}

enum UserStatus {
  ONLINE
  OFFLINE
  IN_GAME
}
